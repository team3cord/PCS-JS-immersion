#!/usr/bin/env node
var jsiGame = require('jsi-gamelib');
var prompt = require('prompt');
var gameMap = require('./game.json');
var getLocation = require('./location');
var getMessage = require('./message');

var jsonMap = gameMap.rooms;
console.log('');
console.log('');
console.log('Come and test your wits against the AMAZING MAZE!');


// START FUNCTION  
playerStatus('B');

// MAIN EVAL AND MOVEMENT functions  
function playerStatus(room){
returnMaze();
getMessage.msgCurrentRoom(room);
evalOptions(room);
}
function evalOptions(room){
  var roomsArray = gameMap.rooms;
  var breakPrompt = false;
  roomsArray.forEach(function(el,ind,ra){
     if((roomsArray[ind].treasure) && (roomsArray[ind].name === room)){
      getMessage.msgWinner(room);
      getMessage.msgPlayAgain();
      breakPrompt = true;
      playerStatus('B');
     }
  });
  if(breakPrompt !== true){
    promptMove(room);
  }
}
function promptMove(room){
  prompt.start();
  getMessage.msgWhichDirection(); 
  prompt.get(['direction'], function (err, result){
    getMessage.msgLogMove(result.direction);
    evalAndMove(result.direction, room);
  });
}
function evalAndMove(nextRoom, room){
  switch(nextRoom){
    case 'N':
      checkMove('north', nextRoom , room);
      break;
    case 'S':
      checkMove('south', nextRoom , room);
      break;
    case 'E':
      checkMove('east', nextRoom , room);
      break;
    case 'W':
      checkMove('west', nextRoom , room);
      break;
    default:  
      denyAndReprompt(room);
  }

}
function denyAndReprompt(room){
  getMessage.msgInvalid();
  playerStatus(room);
}


// HELPER functions  

function returnMaze(){
  console.log('');
  console.log('');
  console.log(jsiGame.map(gameMap));
  console.log('');
  console.log('');
}
function checkMove(direction, nextRoom , room){
  var anotherRoomsArray = gameMap.rooms;
  anotherRoomsArray.forEach(function(el,ind,ra){
    var arrayObj = anotherRoomsArray[ind];

    if(((arrayObj["name"]) === room) && ((arrayObj[direction]) !== null)) {
        playerStatus(arrayObj[direction]);
        
    }
  });
}



